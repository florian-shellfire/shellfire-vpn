/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ServerInMapPanel.java
 *
 * Created on 16.06.2011, 19:52:13
 */
package de.shellfire.vpn.gui;

import org.xnap.commons.i18n.I18n;

import de.shellfire.vpn.Storage;
import de.shellfire.vpn.Util;
import de.shellfire.vpn.client.ConnectionState;
import de.shellfire.vpn.client.ConnectionStateChangedEvent;
import de.shellfire.vpn.client.ConnectionStateListener;
import de.shellfire.vpn.client.Controller;
import de.shellfire.vpn.gui.model.CountryMap;
import de.shellfire.vpn.gui.renderer.CountryImageRenderer;
import de.shellfire.vpn.i18n.VpnI18N;
import de.shellfire.vpn.types.Server;
import net.miginfocom.swing.MigLayout;

/**
 * 
 * @author bettmenn
 */
public class ServerInMapPanel extends javax.swing.JPanel implements ConnectionStateListener {

  private final Server server;
  private Controller controller;
  private static I18n i18n = VpnI18N.getI18n();

  /** Creates new form ServerInMapPanel */
  public ServerInMapPanel(Server server) {

    initComponents();
    this.server = server;
    this.controller = server.getController();
    this.controller.registerConnectionStateListener(this);
    this.initContent();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method
   * is always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jServerNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jHostLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jConnectButton = new javax.swing.JButton();
        jServerTypeLabel = new javax.swing.JLabel();
        jCountryLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        setLayout(new MigLayout("", "", ""));

        jServerNameLabel.setBackground(new java.awt.Color(18, 172, 229));
        jServerNameLabel.setFont(new java.awt.Font("Arial", 1, Util.getFontSize())); // NOI18N
        jServerNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        jServerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jServerNameLabel.setText(i18n.tr("Server 2"));
        jServerNameLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jServerNameLabel.setName("jServerNameLabel"); // NOI18N
        jServerNameLabel.setOpaque(true);
        add(jServerNameLabel, "cell 0 0 2 1,grow");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jLabel2.setText(i18n.tr("Host:"));
        jLabel2.setName("jLabel2"); // NOI18N
        add(jLabel2, "cell 0 2,growx,aligny top");

        jHostLabel.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jHostLabel.setText("123.999.999.999");
        jHostLabel.setName("jHostLabel"); // NOI18N
        add(jHostLabel, "cell 1 2,growx,aligny top");
        jHostLabel.getAccessibleContext().setAccessibleName("");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jLabel1.setText(i18n.tr("Server type:"));
        jLabel1.setName("jLabel1"); // NOI18N
        add(jLabel1, "cell 0 4,growx,aligny top");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jLabel3.setText(i18n.tr("Country:"));
        jLabel3.setName("jLabel3"); // NOI18N
        add(jLabel3, "cell 0 6,growx,aligny top");

        jConnectButton.setText(i18n.tr("Connect"));
        jConnectButton.setName("jConnectButton"); // NOI18N
        jConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectButtonActionPerformed(evt);
            }
        });
        add(jConnectButton, "cell 0 8 2 1,growx,aligny top");

        jServerTypeLabel.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jServerTypeLabel.setText("XXX");
        jServerTypeLabel.setName("jServerTypeLabel"); // NOI18N
        add(jServerTypeLabel, "cell 1 4,growx,aligny top");

        jCountryLabel.setFont(new java.awt.Font("Lucida Grande", 0, Util.getFontSize())); // NOI18N
        jCountryLabel.setText("de");
        jCountryLabel.setName("jCountryLabel"); // NOI18N
        add(jCountryLabel, "cell 1 6,growx,aligny top");
        jCountryLabel.getAccessibleContext().setAccessibleName("");

        jLabel4.setBackground(new java.awt.Color(224, 224, 226));
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setOpaque(true);
        add(jLabel4, "cell 0 0 2 9,grow");
    }// </editor-fold>//GEN-END:initComponents

  private void jConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jConnectButtonActionPerformed
    this.connectButtonAction();

  }// GEN-LAST:event_jConnectButtonActionPerformed

  private void connectButtonAction() {
    ShellfireVPNMainForm mainForm = (ShellfireVPNMainForm) Storage.get(ShellfireVPNMainForm.class);
    mainForm.setSelectedServer(this.server);
    mainForm.connectFromButton(true);

  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jConnectButton;
    private javax.swing.JLabel jCountryLabel;
    private javax.swing.JLabel jHostLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jServerNameLabel;
    private javax.swing.JLabel jServerTypeLabel;
    // End of variables declaration//GEN-END:variables
  private ConnectionState currentState;

  private void initContent() {
    this.jServerNameLabel.setText(server.getName());
    this.jHostLabel.setText(server.getHost());

    CountryImageRenderer renderer = new CountryImageRenderer();
    this.jCountryLabel.setText(renderer.getText(server.getCountry()));
    this.jCountryLabel.setIcon(CountryMap.getIcon(server.getCountry()));

    this.jServerTypeLabel.setText(server.getServerType().toString());

  }

  @Override
  public void setVisible(boolean b) {
    this.initContent();
    super.setVisible(b);
  }

  @Override
  public void connectionStateChanged(ConnectionStateChangedEvent e) {
    currentState = e.getConnectionState();

    switch (currentState) {
    case Disconnected:
      this.jConnectButton.setText(i18n.tr("Connect"));
      this.jConnectButton.setEnabled(true);
      break;
    case Connecting:
      this.jConnectButton.setText(i18n.tr("Connecting..."));
      this.jConnectButton.setEnabled(false);
      break;

    case Connected:
      Server s = e.getServer();
      
      if (this.server.equals(s)) {
        
        this.jConnectButton.setText(i18n.tr("Disconnect"));
        this.jConnectButton.setEnabled(true);
      } else {
        this.jConnectButton.setText(i18n.tr("Connecting..."));
        this.jConnectButton.setEnabled(false);

      }

      break;
    }

  }
}
